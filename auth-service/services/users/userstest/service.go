// Code generated by mockery v1.0.0. DO NOT EDIT.

package userstest

import context "context"
import mock "github.com/stretchr/testify/mock"
import rel "github.com/go-rel/rel"
import users "github.com/AdamShannag/go-microservice-app/auth-service/services/users"
import uuid "github.com/google/uuid"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *Service) Create(ctx context.Context, user *users.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, user
func (_m *Service) Delete(ctx context.Context, user *users.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, _a1, id
func (_m *Service) Get(ctx context.Context, _a1 *users.User, id uuid.UUID) error {
	ret := _m.Called(ctx, _a1, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User, uuid.UUID) error); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, _a1, filter
func (_m *Service) GetAll(ctx context.Context, _a1 *[]users.User, filter users.Filter) error {
	ret := _m.Called(ctx, _a1, filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]users.User, users.Filter) error); ok {
		r0 = rf(ctx, _a1, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, user, changes
func (_m *Service) Update(ctx context.Context, user *users.User, changes rel.Changeset) error {
	ret := _m.Called(ctx, user, changes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User, rel.Changeset) error); ok {
		r0 = rf(ctx, user, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
